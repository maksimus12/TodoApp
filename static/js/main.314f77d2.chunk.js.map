{"version":3,"sources":["Todos.js","TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","TodoForm","state","newTodo","e","setState","target","value","newSubmit","preventDefault","props","addTodo","onSubmit","this","type","placeholder","onChange","Component","App","Math","random","console","log","deleting","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAkCeA,EA9BD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,WAEdC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAOF,EAAKG,IAEzC,0BAAMC,QAAS,WAAOR,EAAWI,EAAKG,MAAOH,EAAKK,aAS3D,uBAAGJ,UAAU,UAAb,2BAIP,OACG,yBAAKA,UAAY,oBACfJ,I,OCOMS,E,4MA7BXC,MAAQ,CACJF,QAAS,M,EAGbG,QAAU,SAACC,GACP,EAAKC,SAAL,eACKD,EAAEE,OAAOR,GAAKM,EAAEE,OAAOC,S,EAKhCC,UAAY,SAACJ,GACTA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,Q,uDAKxB,OACI,6BACI,0BAAMU,SAAUC,KAAKL,WACjB,2BAAOM,KAAK,OAAOhB,GAAG,UAAUiB,YAAY,iBAAiBC,SAAUH,KAAKV,UAC5E,gD,GAxBGc,aC8CRC,E,4MA1CbhB,MAAQ,CACNZ,MAAO,CACL,CAACQ,GAAK,EAAGE,QAAS,aAClB,CAACF,GAAK,EAAGE,QAAS,Y,EAKtBW,QAAU,SAAChB,GACTA,EAAKG,GAAKqB,KAAKC,SACf,IAAI9B,EAAK,sBAAO,EAAKY,MAAMZ,OAAlB,CAAyBK,IAClC,EAAKU,SAAS,CACZf,MAAOA,IAET+B,QAAQC,IAAI,EAAKpB,Q,EAInBX,WAAa,SAACO,GACZ,IAAMyB,EAAW,EAAKrB,MAAMZ,MAAMkC,QAAO,SAAA7B,GAAI,OAAIA,EAAKG,KAAOA,KAC7D,EAAKO,SAAS,CACZf,MAAOiC,K,uDAKT,OACE,yBAAK3B,UAAU,sBAEf,wBAAIA,UAAY,oBAAhB,cAEA,kBAAC,EAAD,CAAON,MAASuB,KAAKX,MAAMZ,MAAQC,WAAcsB,KAAKtB,aACtD,kBAAC,EAAD,CAAWoB,QAAWE,KAAKF,e,GAjCfM,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.314f77d2.chunk.js","sourcesContent":["import React from 'react'\n\n\n\nconst Todos = ({ todos, deleteTodo }) =>{\n\n    const todoList = todos.length ? (\n        todos.map(todo => {\n            return( \n                <div className=\"collection-item\" key = {todo.id}>\n                \n                    <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>\n\n                </div>\n             )\n\n\n            })\n        ) : \n        \n        (  <p className=\"center\">You have no todos left!</p> )\n        \n\n\n    return(\n       <div className = \"todos collection\">\n        {todoList}\n       </div>\n\n\n    )\n \n}\n\nexport default Todos;","import React, { Component } from 'react';\n\nclass TodoForm extends Component {\n\n    state = {\n        content: null\n    }\n\n    newTodo = (e) =>{\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n\n\n    }\n    newSubmit = (e) =>{\n        e.preventDefault();\n        this.props.addTodo(this.state);\n        \n    }\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.newSubmit}>\n                    <input type=\"text\" id=\"content\" placeholder=\"your todo here\" onChange={this.newTodo}/>\n                    <button>Submit</button>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default TodoForm;\n","import React, { Component }from 'react';\nimport Todos from './Todos'\nimport TodoForm from './TodoForm'\n\n\nclass App extends Component {\n  state = {\n    todos :[\n      {id : 1, content: \" one milk\"},\n      {id : 2, content: \" sugar\"}\n    ]\n\n  }\n\n  addTodo = (todo) =>{\n    todo.id = Math.random();\n    let todos = [...this.state.todos, todo]\n    this.setState({\n      todos: todos\n    })\n    console.log(this.state);\n\n  }\n\n  deleteTodo = (id) =>{\n    const deleting = this.state.todos.filter(todo => todo.id !== id)\n    this.setState({\n      todos: deleting\n\n    });\n  }\n  render(){\n    return (\n      <div className=\"todo-app container\">\n\n      <h1 className = \"center grey-text\"> Todo List</h1>\n\n      <Todos todos = {this.state.todos}  deleteTodo = {this.deleteTodo}/>\n      <TodoForm  addTodo = {this.addTodo}/>\n\n\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}