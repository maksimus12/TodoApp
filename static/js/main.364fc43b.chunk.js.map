{"version":3,"sources":["TodoRender.js","Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoRender","name","deleteTodo","id","onClick","Todos","vewTodo","map","todos","key","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","length","props","addTodo","onSubmit","this","type","placeholder","onChange","Component","App","toDoList","newState","Math","random","console","log","filtredList","filter","todo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4MAceA,EAZI,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,WAAYC,EAAS,EAATA,GACvC,OACC,6BACC,4BACC,4BACC,wBAAIC,QAAS,kBAAMF,EAAWC,KAAMF,OCM1BI,EAVM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASJ,EAAiB,EAAjBA,WAChC,OACC,6BACEI,EAAQC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CAAYP,KAAMO,EAAMP,KAAME,GAAIK,EAAML,GAAIM,IAAKD,EAAML,GAAID,WAAYA,SCiC5DQ,E,4MArCdC,MAAQ,CACPV,KAAO,I,EAGRW,aAAe,SAACC,GACf,EAAKC,SAAS,CACbb,KAAOY,EAAEE,OAAOC,S,EAIlBC,aAAe,SAACJ,GACfA,EAAEK,iBAC6B,IAA3B,EAAKP,MAAMV,KAAKkB,SACnB,EAAKC,MAAMC,QAAQ,EAAKV,MAAMV,MAC9B,EAAKa,SAAS,CACbb,KAAO,O,uDAMT,OACC,6BACC,0BAAMqB,SAAUC,KAAKN,cACpB,2BACCO,KAAK,OACLR,MAAOO,KAAKZ,MAAMV,KAClBwB,YAAY,iBACZC,SAAUH,KAAKX,eAEhB,+C,GA/BiBe,aCmCPC,E,4MAjCdjB,MAAQ,CACPkB,SAAW,CACT,CAAC1B,GAAG,EAAGF,KAAK,U,EAIfoB,QAAU,SAACpB,GACV,IAAM6B,EAAQ,sBAAQ,EAAKnB,MAAMkB,UAAnB,CAA6B,CAAE1B,GAAI4B,KAAKC,SAAU/B,UAChE,EAAKa,SAAS,CACbe,SAAWC,IAEZG,QAAQC,IAAI,EAAKvB,MAAMV,O,EAGxBC,WAAa,SAACC,GACb,IAAMgC,EAAc,EAAKxB,MAAMkB,SAASO,QAAO,SAACC,GAAD,OAAUA,EAAKlC,KAAOA,KACrE,EAAKW,SAAS,CACbe,SAAWM,K,uDAKZ,OACC,6BACC,yCAEA,kBAAC,EAAD,CAAO7B,QAASiB,KAAKZ,MAAMkB,SAAU3B,WAAYqB,KAAKrB,aACtD,kBAAC,EAAD,CAASmB,QAASE,KAAKF,e,GA5BTM,aCSEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.364fc43b.chunk.js","sourcesContent":["import React from 'react';\n\nconst TodoRender = ({ name, deleteTodo, id }) => {\n\treturn (\n\t\t<div>\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\t<h3 onClick={() => deleteTodo(id)}>{name}</h3>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</div>\n\t);\n};\n\nexport default TodoRender;\n","import React from 'react';\nimport TodoRender from './TodoRender';\n\nexport const Todos = ({ vewTodo, deleteTodo }) => {\n\treturn (\n\t\t<div>\n\t\t\t{vewTodo.map((todos) => (\n\t\t\t\t<TodoRender name={todos.name} id={todos.id} key={todos.id} deleteTodo={deleteTodo} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default Todos;\n","import React, { Component } from 'react';\n\nclass AddTodo extends Component {\n\tstate = {\n\t\tname : ''\n\t};\n\n\thandleChange = (e) => {\n\t\tthis.setState({\n\t\t\tname : e.target.value\n\t\t});\n\t};\n\n\thandleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (this.state.name.length !== 0) {\n\t\t\tthis.props.addTodo(this.state.name);\n\t\t\tthis.setState({\n\t\t\t\tname : ''\n\t\t\t});\n\t\t}\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<form onSubmit={this.handleSubmit}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tvalue={this.state.name}\n\t\t\t\t\t\tplaceholder=\"your todo here\"\n\t\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t\t/>\n\t\t\t\t\t<button>Sbmit</button>\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default AddTodo;\n","import React, { Component } from 'react';\nimport Todos from './Todos';\nimport AddTodo from './AddTodo';\nclass App extends Component {\n\tstate = {\n\t\ttoDoList : [\n\t\t\t\t{id:1, name:\"Milk\"}\n\t\t]\n\t};\n\n\taddTodo = (name) => {\n\t\tconst newState = [ ...this.state.toDoList, { id: Math.random(), name } ];\n\t\tthis.setState({\n\t\t\ttoDoList : newState\n\t\t});\n\t\tconsole.log(this.state.name);\n\t};\n\n\tdeleteTodo = (id) => {\n\t\tconst filtredList = this.state.toDoList.filter((todo) => todo.id !== id);\n\t\tthis.setState({\n\t\t\ttoDoList : filtredList\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h1>To do app</h1>\n\n\t\t\t\t<Todos vewTodo={this.state.toDoList} deleteTodo={this.deleteTodo} />\n\t\t\t\t<AddTodo addTodo={this.addTodo} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}